#!/usr/bin/env bash


# Purge the module environment to avoid conflicts
module unload java/8u111 matlab/R2017b python/2.7.12 intel/2017.0

# Load the required environment

# Load the R module
# module load <%= context.r_module %>
# r_exec_path=$(echo "<%= context.r_exec_path %>" |  tr [:space:] ' ') 
# r_package_path=$(echo "<%= context.r_package_path %>" |  tr [:space:] ' ') 
# r_singularity_path=$(echo "<%= context.r_singularity_container_path %>" | tr [:space:] ' ')
r_exec_path=$(echo "<%= context.r_exec_path %>" |  xargs) 
r_package_path=$(echo "<%= context.r_package_path %>" |  xargs) 
r_singularity_path=$(echo "<%= context.r_singularity_container_path %>" | xargs)
echo " *** checking Assignment ** "
echo $r_exec_path
echo $r_package_path
echo $r_singularity_path


echo "#!/bin/bash" > <%=context.r_exec_path%>/R
echo "singularity exec --bind ${r_package_path}:/usr/local/lib/R/site-library ${r_singularity_path} R \"\$@\" " >>  <%=context.r_exec_path%>/R
chmod a+x  <%=context.r_exec_path%>/R
export PATH=$r_exec_path:$PATH

setup_env () {
  # Additional environment which could be moved into a module
  # Change these to suit
  #export RSTUDIO_SERVER_IMAGE="/users/aragaven/ood_local_install/singularity_container/rserver-launcher-centos7.simg"
  #export SINGULARITY_BINDPATH="/etc,/media,/mnt,/opt,/srv,/usr,/var"
  export PATH="$PATH:/gpfs/runtime/opt/ood_system/rstudio-server/bin"
  #:/usr/lib/rstudio-server/bin"
  # export SINGULARITYENV_PATH="$PATH"
  # export SINGULARITYENV_TZ="America/New_York"
  # In Singularity 3.5.x it became necessary to explicitly pass LD_LIBRARY_PATH
  # to the singularity process
  #export SINGULARITYENV_LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/lib64"
  #export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/lib64"
}
setup_env

echo "Printing PATH"
echo $PATH
#
# Start RStudio Server
#

# PAM auth helper used by RStudio
export RSTUDIO_AUTH="${PWD}/bin/auth"

# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="${PWD}/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RSESSION_WRAPPER_FILE}" << EOL
  #!/usr/bin/env bash
  # module load <%= context.r_module %>
  # module load R/3.5.2
  export PATH="$PATH:/usr/lib/rstudio-server/bin"
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/lib64"
  # Log all output from this script
  export RSESSION_LOG_FILE="${PWD}/rsession.log"

  exec &>>"\${RSESSION_LOG_FILE}"

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession --r-libs-user "${R_LIBS_USER}" "\${@}"
EOL
)
chmod 700 "${RSESSION_WRAPPER_FILE}"

# Set working directory to home directory
cd "${HOME}"

export TMPDIR="$(mktemp -d)"

mkdir -p "$TMPDIR/rstudio-server"
python -c 'from uuid import uuid4; print(uuid4())' > "$TMPDIR/rstudio-server/secure-cookie-key"
chmod 0600 "$TMPDIR/rstudio-server/secure-cookie-key"

set -x
# Launch the RStudio Server
echo "Starting up rserver..."

# rserver --www-port "${port}" \
# --auth-none 0 --auth-pam-helper-path "${RSTUDIO_AUTH}" \
# --auth-encrypt-password 0 --rsession-path "${RSESSION_WRAPPER_FILE}" \
# --server-data-dir /tmp

#added 10/28/2021 AR for new R studio
export LD_LIBRARY_PATH=/gpfs/runtime/opt/ood_system/rstudio-server/pg_libs:$LD_LIBRARY_PATH

rserver --www-port "${port}" \
 --auth-none 0 --auth-pam-helper-path "${RSTUDIO_AUTH}" \
  --auth-encrypt-password 0 --rsession-path "${RSESSION_WRAPPER_FILE}" \
   --server-data-dir /tmp --secure-cookie-key-file "${TMPDIR}/rstudio-server/secure-cookie-key"

#singularity run -B "$TMPDIR:/tmp" "$RSTUDIO_SERVER_IMAGE" \
# --www-port "${port}" --auth-none 1  --auth-pam-helper-path "${RSTUDIO_AUTH}" \
# --auth-encrypt-password 0  --rsession-path "${RSESSION_WRAPPER_FILE}" \
# --server-data-dir /tmp

# echo 'Singularity has exited...'
